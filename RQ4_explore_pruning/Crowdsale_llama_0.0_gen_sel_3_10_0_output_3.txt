mythril_disassembler:contract_name:Crowdsale
./tests/testdata/solidity_files/Crowdsale.sol:Crowdsale
cli:fdg.global_config.contract_name:Crowdsale
Starting preprocessing.
number of genesis states: 1
total instructions: 476
preprocessing: Achieved 99.79% coverage.
Ending preprocessing.
preprocessing time(s): 3.3768179416656494

====== coverage ======
contract coverage: 68.91%
function coverage:
	100.00%: setOwner(address)
	100.00%: setPhase(uint256)
	31.33%: withdraw()
	23.01%: refund()
	96.05%: invest()
	100.00%: fallback

====== current state changing sequence(s): ======
	['setOwner(address)']
	['setPhase(uint256)']
	['invest()']
[31m

===== Generated sequences ====Crowdsale.sol====Crowdsale====1====obtain_sequence.py[0m
[34mrefund:[0m
[0m	['invest', 'setPhase', 'refund'][0m
[34mwithdraw:[0m
[0m	['invest', 'setPhase', 'withdraw'][0m
[34minvest:[0m
[0m	['invest'][0m

==============================
queue:
	setOwner(address)#1
	setPhase(uint256)#2
	invest()#3

====== state and assigned functions ======
state key: invest()#3
functions: ['setPhase', 'invest']

====== coverage ======
contract coverage: 69.54%
function coverage:
	100.00%: setOwner(address)
	100.00%: setPhase(uint256)
	31.33%: withdraw()
	23.01%: refund()
	100.00%: invest()
	100.00%: fallback

====== current state changing sequence(s): ======
	['invest()', 'setPhase(uint256)']
	['invest()', 'invest()']

==============================
queue:
	invest()#setPhase(uint256)#4
	invest()#setPhase(uint256)#5
	invest()#invest()#6

====== state and assigned functions ======
state key: invest()#setPhase(uint256)#4
functions: ['withdraw', 'refund']

====== coverage ======
contract coverage: 81.51%
function coverage:
	100.00%: setOwner(address)
	100.00%: setPhase(uint256)
	100.00%: withdraw()
	23.01%: refund()
	100.00%: invest()
	100.00%: fallback

====== current state changing sequence(s): ======
	['invest()', 'setPhase(uint256)', 'withdraw()']

==============================
queue:
	invest()#setPhase(uint256)#5
	invest()#invest()#6
	invest()#setPhase(uint256)#withdraw()#7

====== state and assigned functions ======
state key: invest()#setPhase(uint256)#5
functions: ['withdraw', 'refund']

====== coverage ======
contract coverage: 99.79%
function coverage:
	100.00%: setOwner(address)
	100.00%: setPhase(uint256)
	100.00%: withdraw()
	100.00%: refund()
	100.00%: invest()
	100.00%: fallback

====== current state changing sequence(s): ======
	['invest()', 'setPhase(uint256)', 'refund()']
#@statespace
121 nodes, 120 edges, 1046 total states
#@coverage
Achieved 10.34% coverage for code: 608060405269152d02c7e14af6800000600055600060015534801561002357600080fd5b50624f1a00420160038190555033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055506103b4806100806000396000f30060806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af4035146100725780632cc82655146100b55780633ccfd60b146100e2578063590e1ae3146100f9578063e8b5e51f14610110575b600080fd5b34801561007e57600080fd5b506100b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061011a565b005b3480156100c157600080fd5b506100e06004803603810190808035906020019092919050505061015e565b005b3480156100ee57600080fd5b506100f76101ae565b005b34801561010557600080fd5b5061010e61022b565b005b610118610309565b005b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600181148015610172575060005460025410155b80610199575060028114801561018b5750600054600254105b8015610198575060035442115b5b15156101a457600080fd5b8060018190555050565b600180541415156101be57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f19350505050158015610228573d6000803e3d6000fd5b50565b600260015414151561023c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156102c1573d6000803e3d6000fd5b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600060015414801561031e5750600054600254105b151561032957600080fd5b34600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550346002600082825401925050819055505600a165627a7a72305820a0a5a743899498834feb75356dd86e003eabb5fae0609696246734abeee4b77d0029
#@coverage
Achieved 99.79% coverage for code: 60806040526004361061006d576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806313af4035146100725780632cc82655146100b55780633ccfd60b146100e2578063590e1ae3146100f9578063e8b5e51f14610110575b600080fd5b34801561007e57600080fd5b506100b3600480360381019080803573ffffffffffffffffffffffffffffffffffffffff16906020019092919050505061011a565b005b3480156100c157600080fd5b506100e06004803603810190808035906020019092919050505061015e565b005b3480156100ee57600080fd5b506100f76101ae565b005b34801561010557600080fd5b5061010e61022b565b005b610118610309565b005b80600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050565b600181148015610172575060005460025410155b80610199575060028114801561018b5750600054600254105b8015610198575060035442115b5b15156101a457600080fd5b8060018190555050565b600180541415156101be57600080fd5b600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166108fc6002549081150290604051600060405180830381858888f19350505050158015610228573d6000803e3d6000fd5b50565b600260015414151561023c57600080fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549081150290604051600060405180830381858888f193505050501580156102c1573d6000803e3d6000fd5b506000600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002081905550565b600060015414801561031e5750600054600254105b151561032957600080fd5b34600560003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282540192505081905550346002600082825401925050819055505600a165627a7a72305820a0a5a743899498834feb75356dd86e003eabb5fae0609696246734abeee4b77d0029
[31m#@llm related statistics[0m
[31mLLM model:llama[0m
[31mtime used(s) by LLM:5.052668571472168[0m
[31minput token counts:[510][0m
[31moutput token counts:[337][0m
==== Integer Arithmetic Bugs ====
SWC ID: 101
Severity: High
Contract: Crowdsale
Function name: constructor
PC address: 42
Estimated Gas Usage: 21038 - 103767
The arithmetic operator can overflow.
It is possible to cause an integer overflow or underflow in the arithmetic operation. 
--------------------
In file: ./tests/testdata/solidity_files/Crowdsale.sol:9


    end=no

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0

==== Dependence on predictable environment variable ====
SWC ID: 116
Severity: Low
Contract: Crowdsale
Function name: setPhase(uint256)
PC address: 415
Estimated Gas Usage: 2729 - 2824
A control flow decision is made based on The block.timestamp environment variable.
The block.timestamp environment variable is used to determine a control flow decision. Note that the values of variables like coinbase, gaslimit, block number and timestamp are predictable and can be manipulated by a malicious miner. Also keep in mind that attackers know hashes of earlier blocks. Don't use any of those environment variables as sources of randomness and be aware that use of these variables introduces a certain level of trust into miners.
--------------------
In file: ./tests/testdata/solidity_files/Crowdsale.sol:18

se) public {
    require (
    (newPhase==1 && raised>=goal) ||
    (newPhase==2 && rais

--------------------
Initial State:

Account: [CREATOR], balance: 0x0, nonce:0, storage:{}
Account: [ATTACKER], balance: 0x0, nonce:0, storage:{}

Transaction Sequence:

Caller: [CREATOR], calldata: , decoded_data: , value: 0x0
Caller: [SOMEGUY], function: setPhase(uint256), txdata: 0x2cc826550000000000000000000000000000000000000000000000000000000000000002, value: 0x0


#@time
time used(s):26.693501949310303
